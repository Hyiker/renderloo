#version 460 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
// use regular sampler to enable linear filtering
layout(binding = 0) uniform sampler2D InputImage;
layout(r16f, binding = 1) uniform image2D OutputImage;

const float GAUSSIAN_KERNEL[] =
    float[](0.06136, 0.24477, 0.38774, 0.24477, 0.06136);

void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = vec2(pixelCoords) / vec2(imageSize(OutputImage));
    // do a 5x5 gaussian blur in the picking pass to get the 1st mipmap
    vec2 texelSize = 1.0 / vec2(textureSize(InputImage, 0));
    float aoSum = 0.0;
    float weightSum = 0.0;
    for (int i = -2; i <= 2; ++i) {
        for (int j = -2; j <= 2; ++j) {
            vec2 sampleUV = uv + vec2(i, j) * texelSize;
            float ao = texture(InputImage, sampleUV).r;
            float weight = GAUSSIAN_KERNEL[i + 2] * GAUSSIAN_KERNEL[j + 2];
            weightSum += weight;
            aoSum += ao * weight;
        }
    }
    aoSum /= weightSum;
    imageStore(OutputImage, pixelCoords, vec4(aoSum));
}