#version 460 core
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
// use regular sampler to enable linear filtering
layout(binding = 0) uniform sampler2D InputImage;
layout(rgba32f, binding = 1) uniform image2D OutputImage;

uniform float brightnessThreshold;

const float GAUSSIAN_KERNEL[] =
    float[](0.06136, 0.24477, 0.38774, 0.24477, 0.06136);

void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(pixelCoords, imageSize(OutputImage)))) {
        return;
    }
    vec2 uv = vec2(pixelCoords + 0.5) / vec2(imageSize(OutputImage));
    // do a 5x5 gaussian blur in the picking pass to get the 1st mipmap
    vec2 texelSize = 1.0 / vec2(textureSize(InputImage, 0));
    vec3 color = vec3(0.0);
    float weightSum = 0.0;
    for (int i = -2; i <= 2; ++i) {
        for (int j = -2; j <= 2; ++j) {
            vec2 sampleUV = uv + vec2(i, j) * texelSize;
            vec3 pixel = texture(InputImage, sampleUV).rgb;
            float luminance = dot(pixel, vec3(0.2126, 0.7152, 0.0722));
            float w1 = GAUSSIAN_KERNEL[i + 2] * GAUSSIAN_KERNEL[j + 2];
            float w2 = 1.0 / (1.0 + luminance);
            float weight = w1 * w2;
            weightSum += weight;
            if (luminance > brightnessThreshold) {
                color += pixel.rgb * weight;
            }
        }
    }
    color /= weightSum;
    color = clamp((color - brightnessThreshold) * 0.5, 0.0, 1.0);
    imageStore(OutputImage, pixelCoords, vec4(color, 1.0));
}